выделение слов - букв. 
по списку букв понять какое слово - по списку примеров запомнить все новые буквы
для каждого слова запомнить Список(букв) лучше отсортированые окно = кно опал=алпа
по входному слову ищем диапазон в отсортрованом списке с каждой буквой диапазон будет сжиматься получим 
	некий список(слов с перестановками)
нечетких вариантов не получим.
	
более точный вариант
 структуру хранения как в окнах 
слог { 
	строка =йцу,  
	список предыдуших слогов, //левое окружение
	список следующих слогов	//правое окружение
	список адресов слов содержащих этот слог - это количество надо минимизировать
}
слово{
	список адресов слогов по порядку (по 2, по 3, по 4, по гласным,соглаасным и т.д.) 
      }

следующий слог отличается на одну букву (!ок, след= окн, дальше кно, дальше но!) 
	получиться ттоже что и просто  список буква
если перекрывание не брать, !ок след но!
можно брать двойки слов !о,кн,о! у каждого слога  
можно брать разбивку по гласным !о-кно! !по- то-п!, ру-сски-й, рус-ски-й
лучше искать вварианты разбивки, чтобы минимизировать хранение.
возможно получиться разбивка на приставки, корни, суфиксы,окончания.есть правда изменяющиеся буквы узел, узлу, е-исчезло
если брать слоги, и искать в отсртированом списке, то количество перестановочных слов уменьшиться
	Это все тупые базы, нет правил словообразования, триоксикарбон, радиорубка
по найденому слогу можно опредилить ошибки набора,если список адресов слов пуст у слога или он очень мал или его нет в словаре

ПРЕДСТАВЛЕНИЕ ШАБЛОНОВ

слово{ приставка слог, корень слог, суффиксы слог, окончания слог} - это вариант структуры слова
структура -это скелет он не меняется, связи здесь фиксированны
	Список слогов - это структура вида -  слог1-связь1-слог2-связь2- слог3-связь3
	в структуре связи жесткие - т.е. имеют 2 конца
	в общем случае слог1 имеет много связей
	ряд это когда слог1-связь- слог1-связь-слог1-связь-..= ряд(2)= (-слог-связь-)(2) иИЩЕМ ПОВТОРЫ 
Слог это тоже структура -(буква1-связь-буква2)-связь-(буква3-связь-буква4)-
она выделяется из более длинного ряда, получается слог1-связь-слог2-
слог это уже структура - простейшая , как рвать длинный ряд заранее неизвестно.
	Варианты:На равные части по таймеру, 
		по количесту,счету=длине, 
		по событиям ,если встретиться ПРОБЕЛ, пауза динная, резкий перепад громкости - более частый вариант
Узел шаблона - допустим приставка имеет имя , соседкие связи, либо родительские связи, дочерние связи 
Родительская связь (Вышестоящая) на шаблон Слова, приставка может не знать о существовании соседей,

       / приставка - значение
слово  - корень - значение
       \ окончание -значение

	      слово
	/	\       \
приставка   -  корень -   окончание

 это вариант когда из плоской структуры -(буква1-связь-буква2)-связь1-(буква3-связь-буква4)-связь2- 
связь1 превращается в узел шаблона -связь-узел-связь
- слог1-связь-узел1-связь- слог2- связь-узел2-связь- слог3-

узел1 и узел2 появились,Но неподнялись в иерархии, они не имеют связей - просто посредники
некоторый слог например корень также мог стать узлом - главным, но слово специализированый агент, он только связывает, и ничего не имеет как корень
рождение узла может поррождать новую пустую связь которая ищет похожую у другого узла
либо слой узлов уже существует - например градиенты

      узел12  - узел23
     /      \  /      \
   узел1 - узел2 -   узел3
/    \     /     \   /    \
сл1  сл2  сл3   сл4 сл5   сл6

потом узел1 и узел2 могут слиться 
возможно что узел1 имеет связи более длиные и может захватывать 3 или 4 слога 
может быть узел1 и узел2 имеют общие слоги, получается вид нейросети, некоторые связи затем могут отмереть.
Какие связи отомрут 


Сеть градиентов
узел1 узел2 узел3 узел4 узел3
/    \/   \ /  \ /   \  /    \
сл1  сл2  сл3   сл4   сл5     сл6

Сеть градиентов может иметь обратные связи для создания фокуса
Выше вариант узел2, узел4 удалены, получается разбивка на пары 
Разбивка с пересечением не аналогична отдельным буквам, тк. словарь пар будет меньше словаря всегомножества пар

Шаблон повторов это когда через некоторе время на слоги попадает занаво тоже слово. Происходит узнавание. Совпадение.
Я уже писал класс нечеткого сравнения, когда проверяются длина и случайный набор элементов
 

когда поступают  звуки это 0-измерение,  запоминание делает из них 1-мерные структуры , т.е. есть несколько слоев уже существуют
например заполнение стека , появление нового символа проталкивает все запомненное на следущий уровень это как фотофиниш- щелевое видео

сл1  сл2  сл3   сл4 сл5   сл6              вход
 |    |    |     |   |     |    узел1
сл1  сл2  сл3   сл4 сл5   сл6              слой1
 |    |    |     |   |     |    узел2
сл1  сл2  сл3   сл4 сл5   сл6              слой2
 |    |    |     |   |     |	узел3
сл1  сл2  сл3   сл4 сл5   сл6






Критерии выделения объекта. Части объекта тоже можно считать объектами.
Программа которая постоянно работает и ищет варианты удовлетворения человеческих потребностей

деление пространства на квадраты или щестгранники. т.е. неиспользование декартовых координат.
один объект может быть зарегисрирован в разных пространствах игрок например регистрируется в прострастве сцены и в пространстве персонажей 
Проблема резких границ. также как выше деление слогов по парам.




модель представления данных
все примитивы и группы сохраняются в список байт или бит
Примитив 1 идет код типа (10) Целое например,1 байт, 2-ое за ним значение= 4 байта данных, код типа ищется в справочнике типов, справочник уже содержит модель хранения

модель хранения это список последовательных пар ( 0-7 бит: код типа, 4 байт: данные) (пара(количество байт- куда ,значение )

Если есть группа однотипных данных можно не записывать(сохранять) код типа для каждого числа.
группа (1: код типа однотипной группы , 2 код типа элемента, кол-во элементов, данные элементов 
							(фикс длина элементов -легко ищется элемент, не фиксир длина -плохо ищется
								либо по символу конца строки-очень плохо, по сохраненой длине лучше, скачками)

Генерация Методов
 для разных объектов Исходя из модели сохранения данных ( создать метод(имя= сохранить тип= целое , модель данных типа) 
								создать новый послед.метод 
								вычислить необходимость проверки длины значения выделяемому месту для всех пар модели типа
								длявсех ( пар из модели)

								   если требуется проверка длины значения и выделяемого места, то
									добавить метод(" рез1=сравнить (пара.колБайт > значение(пара.Что).длина)
									добавить метод( "если рез1=нет, вернуть ошибку длины")

							  	   добавить(куда= в посл.метод, что=записать ( пара.колБайт, значение(пара.Что) )
								вернуть метод.

	проверка длины значения выделенному месту обязательна, если точно неизвестно выполнение этого метода для всех возможных значений
	эта проверка существенно замедлит метод
	если проверку не сделать данные запишуться обрезанными
	метод может содержать атрибут ( отключена проверка, есть риск )


Самосборка объектов


из кубов сложить стену.скелет
в каждый куб вложить следующую программу:
 
	размер стены неизменное целое размер_верт, размер_гор + условия матрицы
	коннекторы связи с,ю,з,в (4 связи) либо только 1 связь 
	
	переменные "внутренние координаты" целое число: верт, гор
	УстановитьСвязь(_)
	если столкнулись и внутренние координаты пусты, то получить от него его координаты (слева_верт, слева_гор)
		если 0<слева_верт<размер_верт и 0<слева_гор< размер_гор (матрица незаполнена)
		то установить связь с кубом ,верт=слева_верт+1, гор=слева_гор+1 (ЦЕЛЬ= установить связь (связи) если выполняются условия)
		
	Ответить_вернуть_координаты() (верт, гор)
	
	ПослатьСообщениеВсем() - это аналог силы притяжения (на посылку сообщений нужна энергия, можно один раз послать и ждать, либо слать переодически
		есть свободые связи данные (чем дальше тем сигнал слабее),
		или если есть установленные связи между всеми 
		(прямые или через почтовик) выбирается ближайший и ему посылается команда двигаться в направлении вектора, 

Начальные условия уложенные кубы в стопку или летающие в случайном порядке кубы, при столкновении, запускается эта метод
Установления связи

Если разрушиться часть стены, то она самовостановиться, из этой проги (если убрать сранение с 0) востановиться только правая и верхняя часть
выше несимметричный алгоритм может создать дырявую стену(пористую) попасть внутрь дырки не всегда точно получиться

Устанавливать можно сразу несколько связей

 ЗАТРАВКА или начальная фиксация 

Начало стройки начинается фиксацией (верт, гор) любого куба для симметричного алгоритма
для несеметиричного случая целая стена получиться только если появиться куб с (верт=1, гор=1)- затравка   
Если первоначально появиться куб с (20,10) построиться только часть стены.
Поэтому важно появление только одной затравки. Если появяться две затравки могут быть проблемы 
Множественное появление затравок приведет к появлению кучи недостроенных стенок. А столкновение таких недостроек неприведет ни к чему, т.к. спосбностью связываться обладают только единиччные кубы
Если изменить внутрений алгогритм, связь устанавливается повзаимному сошгласию, если у обоих кубов есть свободные связи, то 
                                                         либо по решению уже связанного куба (части стенки) если столкнулись и внутр координаты не пусты, то установить новую связь
								здесь свободные кубы могут не иметь внутренней программы они только сообщают о наличии свободной связи
								далее пустой куб может скачивать внутреннюю программу и сам становиться активным присоединителем. 
 ВНУТРЕННЯЯ ПРОГРАММА - это аналог создателя
хотя и сильно отличающееся от программы координатора, разрешения на установления связей получаются в результате собственных вычислений, а не внешних сообщений-команд.

Алгоритм с активацией связей= конекторы связь акивируется на установление связи если выполняются условия. Крайние кубы имеют заблокированые конкторы связи 

ВНЕШНЯЯ ПРОГРАММА СОЗДАТЕЛЬ - нематериальный объект 

Другой вариант с создателем. Один - невидимый объект - координатор, устанавливает связи с остальными кубами. 
Куб подлетает на некот растояние, обменивается сообщением с Невидимым, если у того есть свободная ячейка, то устанавливается невидимая связь по которой идут команды, разрешения на установления связей
Создатель это спрут который имеет связи с большим количеством ячеек пространства. Куб подлетает к одной из ячеек и создатель получает сообщение от ячейки. и отдает ей команду-рарешение соединиться.
	Может быть и одна ячека к которой надо подлететь, Создатель берет ближайшую не заполненную и отправляет туда претендента. 
	Требуется наличие транспорта, чтобы переместить туда куб. Дается команда транспорту он перемещает куб в нужное место. 

ПАНЕЛЬ-СОЗДАТЕЛЬ (МАТРИЦА)
Создатель может уже быть незаполненой таблицей или любой другой структурой (типа "матрицы")
Т.е. создатель это типа панели - это структура состтоящая из уже заполненных связей, но с пустыми ячейками кубов - т.е. получается чистый светящийся объект. Куб связей не имеет и получает их только встроившись в матрицу
Пустая ячейка или место стыковки куба это тоже объект но пустой= пустота. пустота со связями. Связи это дороги. Дороги могут сцепляться концами, хотя это противоречит смыслу связи. Концы-конекторы получаются новыми объектами
Такая матрица тоже не содержит центрального создателя 
Пустая ячейка обменивается инофрмацией с кубом, если куб достаточно близко -попал в ячейку то пустая ячейка отдает ему свои связи. Похоже на прием на работу на должность. Приходит человек и получает набор связей
Хотя с приемом на работу у уже принятых на работу есть пустующая связь и с приемом на эту должность связь заполняется, но с конретным человеком. это случай внутренней программы.
ПРием на работу это смесь панели и координатора. Встроиться в матрицу можно только по решению руководителя. Руководитель сообщает остальным сотрудникам, что появился человек на должности и те уже начинают обращаться к нему
Чистая панель это аналог кабинета, кто занял кабинет тот и сотрудник. Остальные ходят в кабинет или посылают туда сообщения(предметы). Т.е. здесь связь не с человеком а с кабинетом. Кабинет это пустая ячейка матрицы.
Владелец кабинета может даже не знать другого владельца кабинета. Он передает деталь в нужное место и его не интересует кому конкретно. Получая кабинет, человек получает внутренню программу, что он должен делать и куда передавать
Это программа может весьма сводна или даже позволять создвать новые кабинеты и связи.
Человек занимая должность имеет внутренние программы или робот может иметь вирусы и делать что не нужно. Эту возможность можно убрать ликвидировав стороние связи (передача данных во внешнюю сеть)- ограниченый набор связей.
Вирус может вносить и изменения ошибки в сам продукт (брак или скрытая модификация).
Владельцем кабинета может быть и робот.
	Владелцы кабинетов имеют ограниченый набор знаний, только то что касается их обязаностей. Не имея доступа к общей картине. Это называется специализацией.
	Возможно система когда никто не обладает общей картиной. Иерархия руководителей. Похоже на человека, человек не знает как работют его органы и не может в них прямо вмешаться.




кубы в ячейках могут устанавливать связи между собой (уже попав в ячеку (узел) матрицы) либо (координатор указвает какие связи кому установить (сообщает всем или только смежным сотруникам) и куб сам притягивается в нужное место- анимация прикольная)
Когда человек пишет надпись на бумаге, то он устанавливает новые связи между чернилами и бумагой в определенных местах при помощи инструмента - ручки. 
Связи с человеком у надписи не появляется. Дальше надпись существует сама по себе. Если часть ее разрушиться, то сама она не восставновиться.



У Растений частично симметричная программа (возможно черенкование, но из части листа или одного черенка без листьев ничего не вырастет), у семенных несимметричная программа, 
у человека - несимметричная в целом. Часть органов может иметь симметричную программу (регенерация у ящерец)

Фирма это структура с координатором. можно расмотреть как структуру денежных потоков. 
Покупатели направляют деньги фирме, координатор перераспределяет их по сотрудникам по своим правилам. Сотрудники не участвуют в формировании правил. Не согласен-уволили или не взяли.А чаще правила -закрыты полностью.
Сами сотрудники собраться в организованную кучу типа фирма не могут, нет алгоритма. САмое простое это флэш-мобы, пришли в одно место и время ,выполнили действие.







