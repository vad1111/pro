нечеткое сравнение с образцом у меня было обратное, я брал вход и сравниваемое слово смотрел количество совпадений, надо сделать наоборот разбить все слова на части, сравниватть уже с этими частями. Похоже на распознование образа в зрении
слова можно увеличивать размерах "ууззеелл" расмотрение вблизи, сжимать " если рядом несколько, смотреть градиент _у-уз-зе-ел-л_  
ощибка перестановки "зуел" 
_уз-узе-зел-ел_  неважность 
 У з есть сосед(-2)_ (-1)у, (+1)е, (+2)л 


каждая строчка кода обычного может быть переделана в строку автомата
автомат=
цикл бесконечный или выход по команде
switch (состояние) - это распознование состояния и выбор реакции сразу. 
case сост1 : строка кода , состояние = сост+1 - это реакция на событие = изменение состояния это можно тупо заменить на goto состояниеХ, Так появилось идея функций
					метки кода начинают функцию= имя функции, далее неименованые метки(номер строки)= тело функций 
					в конце возврат по заранее вставленному адресу (следущая строка после вызывающей). 
						Такая схема теряет явные данные о контексте

...
case сост последнее :  состояние = закончен, break - выход из цикла 

Интерпретоатор - получает команду, распознает, по имени или номеру ищет реакцию, заполняет аргументы и начинает выполнение, если успешно возвращает результат по указанному адресу
,если не удачно выдает 
	а) самый тупой вариант место ошибки в рецепте, надо передавать и сам рецепт тогда и связанное окружение. 
		Рецепты могут быть 
			а) закрытыми, не требующими внешнего окружения, только набор аргументов static методы
			б) использующими внешние переменные окружение, не меняющими эти переменные С# методы (используют поля объекта как глобальные переменные)
			в) меняющие внешние переменные, 
	б) менее тупой исключение с именем ошибки= типа причина ошибки, но без знания контекста не всегда полезно,  


всегда известно текущее состояние выполлнения когда работает switch состояние=поиск реакции 

цикл со свичем это агент котоый получает сообщение об изменении состояния и ищет вариант реакции на 
		событие = закончено выполнение задания "иимя задания" -поручение
		событие - это изменение в списке свойств некоторого объекта. Если изменений нет событие не возникает. 

	агент это если код выполняется не самим агентом а перепоручается другим агентам
	состояние агента:  ищет реакцию, передает поручение, ждет выполнения, получает отчет, читает(распознает) отчет и так по кругу.
обучение агента = передать список событий и реакций на них, потом оттестировать его- агент может добавить список реакций к своим и может произойти перехлест
т.е. событие с таким именем уже будет существовать - реакция на слово хуй например. у агента будет две реакции, тогда нужно добавить контекст=окружение.
тогда будет хуй.в театре= фу и хуй.в гараже=хаха. в гараже и в театре доп.состояния . сокращает размер поиска 
или окрыть файл. временный файл или постоянный файл. если временный и файла нет, создать новый 
т.о. агент имеет базусостояний = команда. место. объект действия. время действия и т.д. прочее окружение 
функция в коде это расширение имени состояния = имяФункции.сост1 - тогда переходы будут правильные, даже если имена состяний совпадают. 
создание временной или постоянной переменной в коде : создать переменую имя1пер в хранилище1(текущем) 
для функции:  создать переменую имя1пер в хранилище1(текущем.имяфункции.имя1пер)
а если рекурсия ? тогда состояние= имяфункции1.имяфункции1.имяфункции1. текущее= текущее.имяфункции.
либо создавать еще один цикл со свичем.
лучше при вызове команды создавать новое хранилище и перердавать в фунцию адрес этого хранилища.

простейший агент= интерпритатор, плучает текст,распознает, выполняет, отправляет отчет, ждет 
агент посредник =получает команду, распознает, ищет исполнителя, отправляет ему команду, ждет, получает отчет, меняет отчет (жулик), отправляет отчет




Сравнения лежит в основе распознования
простейшее одинаковая структура  2 словаря сравнивается значение по каждому ключу. 
				2 списка сравниается значение каждого элемента
сравнение структур как в окнах - разные дети
	дети могут появляться, исчезать, вставляться это аналог событий. Выход список несовпадений ( объект, доб/уд, место в предыдущем, место в новом объекте)
	несовпадения можно сложить по длине две строки, получить список изменений, места где пусто нет изменений, где густо есть)

аналог для двухмерных структур - границы объектов, объект может быть внутри/снаружи, пересекаться/ не пересекаться
кнопки в панели управления rectangle у каждого объекта, перемещение окна менят абсолютные значения, но не меняет относительные, значит твердая привязка
если кнопки уменьшаются по ширине, пропорционально контейнеру, = сжатие. Если в 3-х мерном пространстве, то значения меняются, но включение остается
относительное расположение не меняется, непересекающееся объекты, относительное расположение,

случай с отвлечением Состояние является единственной переменной которая распознается и на нее выдается реакция
если набор реакцций последовательный , то Состояния = Состояние+1 (неименованое)
можно ввести набор переменных, вместо Состояния-строки (), например: "переменная а становиться не ноль", тогда выбор следующей реакции 
		= если переменная!=0 то выбор реакция1
			либо дополнительно(если состояние=1 то реакция1) = ( переменная!=0 и состояние=1) составное условие 
вложенные отвлечения - иерархия минимизуруют количество состояний
пример: соединение установлено. ждем сообщение


галоски а активации в иерахии можно ркгулировать нечеткие шаблоны 
некоторые оюъекты создаваясь являются частью чего-то, создают и требуемое окружение. создаавя Изображение, создается и окно для него 
	соединение установлено. получено сообщение