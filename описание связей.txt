 связь - дорога
	адрес конец1 (адрес узла1)
	адрес конец2 (адрес узла2)
	тип связи (название прямой 1->2  и обратный 1<-2)
	

клнектор связи
	адрес связи
	номер конца (0,1)

конектор узла
	адрес узла
	тип связи

конектор связи удаленный
	адрес конектора 
	тип связи
	
узел
	список конекторов связей 

либо есть пространство где храняться концы
Конец содержит адрес другого конца и тип 
узел хранит список концов

примитивы не должны содержать свои адресы, чистый набор байтов целое длина (код типа+ 4 байта), список байтов (код типа, кол-во байт), список может быть фиксированый = кортеж
выбор состоит из номера адреса элемента и списка выбора (адресного пространства)
группа может быть в виде ленты(списка байт) (последовательность байт, один за другим)= адресное пространство (пустое место= код типа=1, длина пустоты)
		    	индекса с кучей(с собственным адресным пространством) = индекса(адрес в куче)+куча объектов(массив байт некот размера)
				индексы с кучей можно объединять
адрес это тоже примитив,код типа 2, имеет длину в байтах, адрес может быть и байтом и целым, и строкой, и командой
примитив с адресом(адресами) надо как-то назвать? ,где адрес это ссылка на адресное пространство+индекс  = связь, например на группу-ленту и отступ от начала (-ЭТО элемент индекса)




активности времени - у каждой секунды есть хранитель, хранители сменяют друг друга, т.е. есть цепочка храниетлей
хранитель выполняет активность и переходит в состояние пассивности (инь-янь)
у каждого храниетля есть тактовая частота
хранители с разной частотой могут пересекаться в момент активности
получаются несколько параллельных времен (одновременно активных) смешение элементов дня, месяца, года, планет
каждые частоты образуют свою цепочку- типа биоритмы
активности могут быть неодинаковы - как сложный алгоритм (дао-цзи)(путь-сущнсти)
объекты во времени все работают по одинаковым цепочкам

Задания
построить цепочки объектов (структуры домов или вилл, ландшафтов), собирать структуры (библиотеки), связанные удаленные объекты, внутри компа и за пределами.
программа = структура (матрица) команд, в виде структуры объектов, набор событий и реакций = тоже структура объектов, 
набор служб (активностей) = структура в виде взамодействующих активных объектов.

Создать новый пустой процесс (Хранилище) с окном и запустить 
ХранилищеВПамяти это основа процесса- ядро. В неего можно загрузить разные объекты (окно например и показать его на экране), создать окружение = загрузить библиотеки
Связать окна разных процессов, чтобы одно находилось в другом. И при смещении первого также смещалась

Создать удаленное хранилище. Это значит что оно должно поддерживать получение и отправку сообщений. Сообщения могут содержать команды. 
У процесса есть внутренние команды, которые не требуют библиотек.Но они ограничены. Библиотеки это набор словарь (команда, исполнение команды)
Исполнение команды может иметь команды которые находяться в другой библиотеке и т.д.
Исполнение команд содержит список состоящий из внутренних команд процесса
Для C# процесса это байт код. Для питон процесса это команды на языке питон= внутрение команды питона. файл с байт-кодом он не поймет
	Можно создать интепритатор С# инструкций. Загружаешь файл C#. Он компилируется и запускается. Кроме файла требуется еще указать адреса библиотек (System как минимум)
по-этому один файл сs не полон. нужен еще файл с инструкциями сборки (версия компилятора, адреса библиотек).
В простейшем-общем виде Процесс должен уметь выполнять следующие команды:
	ПолучитьБиблиотеку(Команд-Реализаций) = получает массив байт
	ПрочитатьБиблиотеку = загружает в свою память словарь (команда, исполнение), (загрузка сборки СШарп в память)
	ВыполнитьКоманду = теперь перечень понятных команд расширилось и их можно выполнять.
	
	Реакция на событие = исполнение команды 
	Событие = получение команды не всегда. Могут приходить сообщения просто с данными =(кусок видео), можно оформить его как команду = ПолучиКусок(данные, ответ не нужен)
		каждый раз будет требоваться интерпритация команды.
	1. Приход сообщения, 
	2. потом интерпритация(распознование) сообщения (выявление команды в частности), 
	3. для команды если распознование успешно и это выполнение разрешено (нет запретов), запуск реакции (поиск инструкций реакции, запуск инструкций)
	   для команды если есть требование посылки отчета(результата) - отсылка результата. 


После интепритации сообщения 

Есть разные утилиты netstat? ipconfig,это exe-шники однократные. Сделать оболчку для них (графическую), чтобы были подсказки
Есть интерпритаторы Питон например, это тоже экзешник, где параметры это скрипты, но Питон запускает еще свою оболчку, где создается отдельный процесс-окно со своим окружением, 
и интерпритатором ручного ввода. Это устаревший консоль. Хочеться добавть его в свой интерпритатор и посылать ему команды. = Создать объект питон-процесс-окружение и посылать
 ему сообщения ну и получать ответы. Похоже на Юпитер, но Юпитер имеет HTML-интерфейс.

ИССЛЕДОВАНИЕ- ПОСТРОЕНИЕ МОДЕЛИ ОБЪЕКТОВ

ПРОСТРАНСТВЕННЫЕ МОДЕЛИ
Это как игра, бегаешь по неизвестной местности и составляшеь карту. 
 Модель состоит из списка известных объектов и связей. Приходишь к объекту и смотршишь его связи к другим объектам. Выявляешь типы связей, По связям доходишь до объектов проверяешь известный объект или нет
	если нет начинаешь его исследование. Так строиться вся карта. Способ исследования важен, если можно только ходить по карте(по x и y), то построишь ттолько карту дорог. 
		причем холмы будут выглядеть как более длинная дорога. если можно еще лазить, то появяться еще горы и дома.
		Метод исследования по (х у, шаг=ш) подобен распространению круговой волны или горению, сам метод = сделатьШаг(X*ш, Y*ш). Можно по одному шагу,можно прыжками кратными длине шага. 
			Более динные шаги иследуют область быстрее, но могут потерять часть замкнутых областей размером меньше длины Заданного шага.Длина шага похожа на частоту в рядах Фурье.
			Это рассуждения для карт имеющих большие пустые поверхности.
		С# объекты больше похожи на лабиринты, где связи похожи на дороги. ПРи начале иследовании должны быть указаны методы выявления списка связей.
		Задача построения графа с направленными связями. Вявление повторяющихся кусков графов, Определение = именование шалблонов и минимизация описания.
		опсание связи однозначно связано с МетодомИследования ШагВлево это имяСвязи и одновременно метод иследования
		Исследуя сборку можно построить граф всех типов, не заглядывая внутрь методов. Дойти до изначальных сборок и объектов, которые не ссылаются на другие сборки. 
		Исследуя только сборки, можно быстро найти изначальные сборки и изначальные объекты. Хороший пример кластеризации объектов= типы в сборках. Изначальный объект = Object
		Также можно построить графы сборок Питона, найти изначальные сборки, изначальные объекты. Файл питона это плохо типизированая динамическая карта, где важна последовательность чтения
			в СиШа файлы более симметричны и имеют строгую структуру, порядок определения класов-типов не важен. Файл питона, аналогчен телу метода в СиШа,где тоже важен порядок 
			в теле метода. есть куски где важна последовательность и где не важна,(Надо изучить, см. Теорию Лямда-исчисления)
Сделать Общую программу Исследования- анализа любых структур. Проанализировать все модули Питона,СиШа, А затем можно найти способ перевода прог Питона в СиШа и обратно. Выявить изначальный набор действий 
для всех языков. Хотя это более менее известно и сейчас. Формальное Описания языков наверно можно найти в сети.Описания конструкций. Минимальный список я уже составил в ДинОбъктах.

КОНТЕЙНЕРЫ - дома контейнеры (пассивные матрицы), для вещей и людей. Люди аквтивности в пассивных матрицах. Дома в ГОродах, Города На Земле. Включающие контейнеры. Но могут быть и дома просто в лесу.
		Город это группа домов. Сначала появляется один дом, второй, потом дороги между ними и все это может быть собрано в Город. 
		Если построить канализацию, вокруг вырастут дома.Построить кишечник вырастут другие органы.
		Набор дорог,канализация, общая инфраструктура характкризует город - это матрица связей. Просто набор домов тоже можно назвать городом. Город это 

		Дом это группа стен и крыши, которые жестко связаны и имеют четкие внешние границы в отличии от города.
ОКРУЖЕНИЯ - могут быть разного типа
		набор схожих (равноправных) объектов (дом и соседние дома, деревья)
		контейнер - ннкая жесткая конструукция,имеющая границы, внутри которой находиться объект (стол внутри дома- не жесткая связь) 
		контейнеры-среды.
		контейнер-вода = нежеская конструкция, имеющая границы (рыба -вода)
		контейнер-газ = нежеская конструкция, не имеющая границы, имеющая плавные границы( верх атомосферы)
		плазма-огонь = нежеская конструкция, не имеет четкой формы, не имеет четкой границы.

	В C# видимость полей (приват, паблик) это обязательный атрибут. Изучая поля можно заметить что они повторяются и тогда можно  можно выдель повторяющийся шаблон. Атрибут это тупиковый узел. 
поле = узел типа структура = единичный выбор из списка доступа, единичный выбор из списка типов объектов, имя поля типа строка

ДИНАМИЧЕМКИЕ МОДЕЛИ ПОВЕДЕНИЯ
это создание моделей методов. И способ иследований другой. Есть некий черный ящик посылаем ему сообщение, смотрим реакцию (в виде простр модели). Такие исследования могут быть бесконечными
Например мат.ящик 


логические выводы - это сокращение пути при принятии решения или осуществлении деййсвтий, например sin^2+ cos^2 можно заменить на 1 и ничего не вычислять
тоже с выводами если из точки А можно попасть в В , а потом в С, то лучше сразу идти в С и обход через В не делать. В это может быть и длинная цепочка В1-В2-..Вн
т.е. связь из А в В должна быть помечена как неэффективная в 100% случаев
также строяться доказательства теорем  В1-В2-..Вн это цепочка доказательства.
доказательства от обратного 